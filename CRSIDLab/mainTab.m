function mainTab(pnMain,pFile,pTemp,pSig,pSys,pMod,userOpt,tbPre,...
    tbAn,dataList,addedData)
% mainTab Opens CRSIDLab's main tab
%     mainTab(pnMain,pFile,pTemp,pSig,pSys,pMod,pInfo,userOpt,tbPre,tbAn,
%     dataList,addedData) opens CRSIDLab's main tab on parent panel pnMain.
%     pFile, pTemp, pSig, pMod and pInfo are data objects that store
%     patient file data. userOpt stores users options from previous and 
%     current sessions. tbPre and tbAn are the preprocessing and analysis
%     tab buttons. dataList stores the variables imported from the 
%     workspace, while addedData stores the variables that were selected to
%     compose a new patient file. On the main tab,the user may open a 
%     patient file to view the data or continue processing or create a 
%     new patient file. Once a patient file is opened or created, the user 
%     may view or edit the patient record information and manage the 
%     current data.
%
% Original Matlab code: Luisa Santiago C. B. da Silva, April 2017

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   Toolbox information
%

toolboxInfo = sprintf([' Luisa Santiago C. B. da Silva (luisasantiago@',...
    'hotmail.com) \nDepartment of Electrical Engineering - School of ',...
    'Technology\n                  University of Brasilia']); 

uicontrol('parent',pnMain,'Style','text','String',...
    'CRSIDLab - Cardiorespiratory System Identification Lab','Units',...
    'Normalized','Position',[0 .85 1 .1],'FontSize',24,'hor','center');

uicontrol('parent',pnMain,'Style','text','String',toolboxInfo,'Units',...
    'Normalized','Position',[0 .7 1 .15],'FontSize',12,'hor','center');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Open patient file
%

pnOpen = uipanel('parent',pnMain,'title','Open/Create Patient File',...
    'Units','Normalized','Position',[.032 .06 .15 .6]);
pbOpen = uicontrol('parent',pnOpen,'style','push','string',...
    'Open Patient File','Units','Normalized','Position',...
    [.1 .9 .8 .07]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Create patient file
%

uicontrol('parent',pnOpen,'style','text','string',['Or create patient ',...
    'file:'],'Units','Normalized','Position',[.1 .8 .8 .07]);
uicontrol('parent',pnOpen,'style','text','string','Patient ID:','hor',...
    'left','Units','Normalized','Position',[.1 .74 .8 .07]);

% set patient ID (patient filename)
teID = uicontrol('parent',pnOpen,'style','edit','hor','left','Units',...
    'Normalized','Position',[.1 .69 .8 .07],'callback',{@patientID,...
    userOpt},'backgroundcolor',[1 1 1]);
uicontrol('parent',pnOpen,'style','text','string',['Folder to ',...
    'store file:'],'hor','left','Units','Normalized','Position',...
    [.1 .59 .8 .07]);

% set directory to save patient file
teDir = uicontrol('parent',pnOpen,'style','edit','hor','left','Units',...
    'Normalized','Position',[.1 .54 .71 .07],'callback',{@inputDir,...
    userOpt},'backgroundcolor',[1 1 1]);
uicontrol('parent',pnOpen,'style','push','string','...','callback',...
    {@browseDir,teDir,userOpt},'Units','Normalized','Position',...
    [.81 .54 .1 .07]);

% import / remove variables to / from patient file
pbVar = uicontrol('parent',pnOpen,'style','push','string',['Import ',...
    'variables'],'Units','Normalized','Position',[.1 .44 .8 .07]);
uicontrol('parent',pnOpen,'style','text','string','Current variables:',...
    'hor','left','Units','Normalized','Position',[.1 .34 .8 .07]);

% display variables added to patient file
lbVar = uicontrol('parent',pnOpen,'style','listbox','max',2,'value',[],...
    'enable','inactive','Units','Normalized','Position',[.1 .15 .8 .21]);

pbCreate = uicontrol('parent',pnOpen,'style','push','string',['Create ',...
    'Patient File'],'Units','Normalized','Position',[.1 .05 .8 .07]);

set(pbVar,'callback',{@mainVarSel,pTemp,lbVar,userOpt,dataList,addedData});

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% View / edit patient record information
%

pnRecord = uipanel('parent',pnMain,'title','Patient Record','Units',...
    'Normalized','Position',[.215 .06 .36 .6]);
txRecord = uicontrol('parent',pnRecord,'style','edit','hor','left',...
    'fontsize',9,'Units','Normalized','Position',[0 0 1 1],'max',2);

% edit and save patient record information
pbEditRecord = uicontrol('parent',pnRecord,'style','push','string',...
    'Edit','Callback',{@mainRecEdit,txRecord,pFile,userOpt},...
    'Units','Normalized','Position',[.75 .9 .2 .07]);
pbSaveRecord = uicontrol('parent',pnRecord,'style','push','string',...
    'Save TXT','Callback',{@pRecordSave,userOpt},'Units',...
    'Normalized','Position',[.75 .8 .2 .07]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% View / edit data on patient file
%

txData = struct;

pnData = uipanel('parent',pnMain,'title','Patient Data Overview',...
    'Units','Normalized','Position',[.608 .06 .36 .6]);

tbECG = uicontrol('parent',pnData,'style','toggle','tag','ecg','string',...
    'ECG data','units','normalized','Position',[0 .898 .155 .075]);
txData.ecg = uicontrol('parent',pnData,'style','edit','hor','left',...
    'fontsize',9,'units','normalized','position',[0 0 1 .9],'max',2);

tbBP = uicontrol('parent',pnData,'style','toggle','tag','bp','string',...
    'BP data','units','normalized','Position',[.1535 .898 .135 .075]);
txData.bp = uicontrol('parent',pnData,'style','edit','hor','left',...
    'fontsize',9,'units','normalized','position',[0 0 1 .9],'max',2);

tbRSP = uicontrol('parent',pnData,'style','toggle','tag','rsp','string',...
    'Respiration data','units','normalized','Position',...
    [.287 .898 .25 .075]);
txData.rsp = uicontrol('parent',pnData,'style','edit','hor','left',...
    'fontsize',9,'units','normalized','position',[0 0 1 .9],'max',2);

tbSys = uicontrol('parent',pnData,'style','toggle','tag','sys','string',...
    'Systems and Models','units','normalized','Position',...
    [.5355 .898 .32 .075]);
txData.sys = uicontrol('parent',pnData,'style','edit','hor','left',...
    'fontsize',9,'units','normalized','position',[0 0 1 .9],'max',2);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Set final callbacks and call opening function (setup)
%

set(pbOpen,'Callback',{@openPatientFile,pFile,pSig,pSys,pMod,teID,...
    teDir,lbVar,txRecord,pbEditRecord,pbSaveRecord,tbPre,tbAn,txData,...
    userOpt});
set(pbCreate,'Callback',{@createPatientFile,teID,teDir,pFile,pTemp,pSig,...
    pSys,pMod,lbVar,txRecord,pbEditRecord,pbSaveRecord,tbPre,tbAn,...
    txData,dataList,addedData,userOpt});

set(tbECG,'callback',{@tabChange,tbECG,tbBP,tbRSP,tbSys,txData,userOpt});
set(tbBP,'callback',{@tabChange,tbECG,tbBP,tbRSP,tbSys,txData,userOpt});
set(tbRSP,'callback',{@tabChange,tbECG,tbBP,tbRSP,tbSys,txData,userOpt});
set(tbSys,'callback',{@tabChange,tbECG,tbBP,tbRSP,tbSys,txData,userOpt});

openFcn(userOpt,pFile,teID,teDir,lbVar,txRecord,pbEditRecord,...
    pbSaveRecord,tbECG,tbBP,tbRSP,tbSys,txData);
end

function openFcn(userOpt,pFile,teID,teDir,lbVar,txRecord,pbEditRecord,...
    pbSaveRecord,tbECG,tbBP,tbRSP,tbSys,txData)

options = get(userOpt,'userData');

set(teID,'string',options.session.main.teID);
set(teDir,'string',options.session.main.teDir);
set(lbVar,'string',options.session.main.lbVar);
set(txRecord,'string',options.session.main.txRecord);
if options.session.main.opened
    set(txRecord,'enable','inactive');
    set(pbEditRecord,'enable','on');
    set(pbSaveRecord,'enable','on');
    set(txData.ecg,'enable','inactive');
    set(txData.bp,'enable','inactive');
    set(txData.rsp,'enable','inactive');
    set(txData.sys,'enable','inactive');
else
    set(txRecord,'enable','off');
    set(pbEditRecord,'enable','off');
    set(pbSaveRecord,'enable','off');
    set(txData.ecg,'enable','off');
    set(txData.bp,'enable','off');
    set(txData.rsp,'enable','off');
    set(txData.sys,'enable','off');
end

patientDisplay(pFile,txData);
switch options.session.nav.info
    case 0
        set(tbECG,'value',1);
        tabChange(tbECG,[],tbECG,tbBP,tbRSP,tbSys,txData,userOpt);
    case 1
        set(tbBP,'value',1);
        tabChange(tbBP,[],tbECG,tbBP,tbRSP,tbSys,txData,userOpt);
    case 2
        set(tbRSP,'value',1);
        tabChange(tbRSP,[],tbECG,tbBP,tbRSP,tbSys,txData,userOpt);
    case 3
        set(tbSys,'value',1);
        tabChange(tbSys,[],tbECG,tbBP,tbRSP,tbSys,txData,userOpt);
end
end

function openPatientFile(~,~,pFile,pSig,pSys,pMod,teID,teDir,lbVar,...
    txRecord,pbEditRecord,pbSaveRecord,tbPre,tbAn,txData,userOpt)
% open existing patient file

errStat = 0;

options = get(userOpt,'userData');
[patientFile, filePath] = uigetfile({'*.mat','MAT-files (*.mat)'},...
    'Select patient file',options.session.filename);

if (any(patientFile~=0) || length(patientFile)>1) && ...
        (any(filePath~=0) || length(filePath)>1)
    
    filename = fullfile(filePath,patientFile);
    varInfo = who('-file',filename);
    if ~ismember('patient',varInfo)
        uiwait(errordlg(['Patient data not found! There''s no variable',...
            ' named ''patient'' in the indicated file.'],...
            'Patient data not found','modal'));
        errStat = 1;
    else
        load(filename,'patient');
        if ~isa(patient,'dataPkg.patientData')
            uiwait(errordlg(['Patient data object not found! The ',...
                'variable named ''patient'' in the indicated file is ',...
                'not a patientData object.'],'Patient data not found',...
                'modal'));
            errStat = 1;
        end
    end
else
    errStat = 1;
end

if ~errStat
    set(pFile,'userData',patient);
    set(pSig,'userData',patient.sig);
    sys = dataPkg.patientSys; set(pSys,'userData',sys);
    model = dataPkg.sysModel; set(pMod,'userData',model);
    
    % load patient record information
    pRecord = sprintf(['\n        Patient ID:  ',patient.info.ID,'\n\n',...
        '        Name:  ',patient.info.name,'\n        Age:  ',...
        patient.info.age,'\n        Gender:  ',patient.info.gender,'\n',...
        '        Place of origin:  ',patient.info.origin,'\n        ',...
        'Address:  ',patient.info.address,'\n        Phone:  ',...
        patient.info.phone,'\n        E-mail address:  ',...
        patient.info.email,'\n\n        Exam date:  ',patient.info.date,...
        '\n\n        Experimental protocol:  ',patient.info.protocol,...
        '\n\n        Physical exam:  ',patient.info.physExam,'\n\n    ',...
        '    Clinical ','history:  ',patient.info.clinHis,'\n\n       ',...
        ' Family history:  ',patient.info.famHis]);
    set(txRecord,'string',pRecord,'enable','inactive');
    set(pbEditRecord,'enable','on');
    set(pbSaveRecord,'enable','on');
    set(teID,'string','');
    set(teDir,'string','');
    set(lbVar,'string','');
    
    options.session.main.opened = 1;
    options.session.filename = filename;
    [options.main.path,~,~] = fileparts(filename);
    options.session.main.teID = '';
    options.session.main.teDir = '';
    options.session.main.lbVar = '';
    options.session.main.txRecord = pRecord;
    set(userOpt,'userData',options);
    
    set(tbPre,'enable','on');        % enable pre-proc. tab
    if ~isempty(patient.sig.ecg.rri.aligned.data) || ...
            ~isempty(patient.sig.bp.sbp.aligned.data) || ...
            ~isempty(patient.sig.bp.dbp.aligned.data) || ...
            ~isempty(patient.sig.rsp.ilv.aligned.data) || ...
            ~isempty(patient.sig.rsp.filt.aligned.data)
        set(tbAn,'enable','on');    % enable analysis tab
    end
    
    patientDisplay(pFile,txData);
    set(txData.ecg,'enable','inactive');
    set(txData.bp,'enable','inactive');
    set(txData.rsp,'enable','inactive');
    set(txData.sys,'enable','inactive');
end
end

function patientID(scr,~,userOpt)
% check for a valid file name

if ~isvarname(get(scr,'String')) && ~isempty(get(scr,'String'))
    errordlg(sprintf(['Patient ID should be a valid file name!\n\n',...
        'A valid file name can contain letters, digits and ',...
        'underscores, with less than 64 characters, the first ',...
        'character a letter, and must not be a Matlab keyword.']),...
        'Invalid file name');
    set(scr,'String','');
end
options = get(userOpt,'userData');
options.session.main.teID = get(scr,'String');
set(userOpt,'userData',options);
end

function inputDir(scr,~,userOpt)
% check for a valid directory

if ~exist(get(scr,'String'),'dir') && ~isempty(get(scr,'String'))
    uiwait(errordlg(['This folder does not exist! Type in the full ',...
        'path to an existing folder.'],'Folder not found','modal'));
    set(scr,'String','');
end
options = get(userOpt,'userData');
options.session.main.teDir = get(scr,'String');
set(userOpt,'userData',options);
end

function browseDir(~,~,teDir,userOpt)
% open dialog box to find directory

options = get(userOpt,'userData');

currentPath = uigetdir(options.session.main.prevPath,['Select folder ',...
    'to store patient file']);
if currentPath~=0
    set(teDir,'String',currentPath);
    options.session.main.prevPath = currentPath;
    set(userOpt,'userData',options);
end
end

function createPatientFile(~,~,teID,teDir,pFile,pTemp,pSig,pSys,pMod,...
    lbVar,txRecord,pbEditRecord,pbSaveRecord,tbPre,tbAn,txData,...
    dataList,addedData,userOpt)
% create new patient file

errStat = 0;
errStat2 = 0;

if isempty(get(lbVar,'string'))
    uiwait(errordlg(['Empty data! No variables have been imported to ',...
        'be part of the patient file. Please import at least one ',...
        'variable.'],'Empty data','modal'));
    errStat = 1;
elseif isempty(get(teID,'string'))
    uiwait(errordlg(['Missing patient ID! Please enter the patient ID,',...
        ' which will be used as the patient file name.'],...
        'Missing patient ID','modal'));
    errStat = 1;
elseif isempty(get(teDir,'string'))
    [selButton, dlgShow] = uigetpref('CRSIDLabPref',...
        'dirPref','Directory Specification',sprintf(['Warning!',...
        '\nYou have not selected a directory to save the patient file.',...
        '\nIf no directory is provided, patient file will be saved in ',...
        'the current Matlab path.']),{'Save to current path',...
        'Return to add directory'},'DefaultButton',...
        'Return to add directory');
    if strcmp(selButton,'return to add directory') && dlgShow
        errStat = 1;
    end
end

if ~errStat
    
    pID = get(teID,'string');
    path = get(teDir,'string');
    if isempty(path)
        path = pwd;
    end
        
    filename = fullfile(path,[pID,'.mat']);
    
    if exist(filename,'file')
        [selButton, dlgShow] = uigetpref('CRSIDLabPref',...
            'savePatientPref','Directory Specification',sprintf([...
            'Warning!','\nA file with the given patient ID already ',...
            'exists at the given directory.\nAre you sure you wish to ',...
            'overwrite it?']),{'Yes','No'},'DefaultButton','No');
        if strcmp(selButton,'no') && dlgShow
            errStat2 = 1;
        end
    end
    
    if ~errStat2
        
        patient = get(pTemp,'userData');
        patient.info.ID = pID;
        set(pFile,'userData',patient);
        set(pSig,'userData',patient.sig);
        sys = dataPkg.patientSys; set(pSys,'userData',sys);
        model = dataPkg.sysModel; set(pMod,'userData',model);
        save(filename,'patient');
        
        % clear patient creation data
        patient = dataPkg.patientData;
        set(pTemp,'userData',patient);
        set(lbVar,'string','','value',[]);
        set(teID,'string','');
        set(teDir,'string','');
        data1 = struct; 
        set(dataList,'userData',data1);
        set(addedData,'userData',data1);
        
        % enable patient record editing
        pRecord = sprintf(['\n        Patient ID:  ',pID,'\n\n        ',...
            'Name:\n        Age:\n        Gender:\n        Place of ',...
            'origin:\n        Address:\n        Phone:\n        E-mail',...
            ' address:\n\n        Exam date:\n\n        Experimental ',...
            'protocol:\n\n        Physical exam:\n\n        Clinical ',...
            'history:\n\n        Family history:']);
        set(txRecord,'string',pRecord,'enable','inactive');
        set(pbEditRecord,'enable','on');
        set(pbSaveRecord,'enable','on');
        
        set(teID,'userData',pID);
        set(teDir,'userData',path);
        
        options = get(userOpt,'userData');
        options.session.main.done = 0;
        options.session.main.opened = 1;
        options.session.filename = filename;
        options.session.main.teID = '';
        options.session.main.teDir = '';
        options.session.main.lbVar = '';
        options.session.main.listString = '';
        options.session.main.txRecord = pRecord;
        options.session.main.prevPath = path;
        set(userOpt,'userData',options);
        
        set(tbPre,'enable','on');         % enable pre-proc. tab
        set(tbAn,'enable','off');         % disable analysis tab
        
        patientDisplay(pFile,txData);
        set(txData.ecg,'enable','inactive');
        set(txData.bp,'enable','inactive');
        set(txData.rsp,'enable','inactive');
        set(txData.sys,'enable','inactive');
    end
end
end

function pRecordSave(~,~,userOpt)
% save patient record information to and text file

options = get(userOpt,'userData');
[path,filename,~] = fileparts(options.session.filename);
recordFile = fullfile(path,[filename,'_record.txt']);
[fileName,pathName,~] = uiputfile('*.txt',['Save patient record ',...
    'information to text file'],recordFile);
if (any(fileName~=0) || length(fileName)>1) && ...
        (any(pathName ~=0) || length(pathName)>1)
    pRecord = options.session.main.txRecord;   
    [fid, message] = fopen(recordFile,'w');
    if fid == -1
        uiwait(errordlg(['Could not create file: ',message,'. Verify ',...
            'if the file is opened in another program or try again ',...
            'with a different filename.'],'TXT export error','modal'));
    else
        fwrite(fid,pRecord,'char');
        fclose(fid);
    end
end
end

function tabChange(scr,~,tbECG,tbBP,tbRSP,tbSys,txData,userOpt)

if get(scr,'value') == 1
    set(scr,'backgroundcolor',[1 1 1]);
    options = get(userOpt,'userData');
    switch get(scr,'tag')
        case 'ecg'
            options.session.nav.info = 0;
            set(userOpt,'userData',options);
            set(tbBP,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.bp,'visible','off');
            set(tbRSP,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.rsp,'visible','off');
            set(tbSys,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.sys,'visible','off');
            set(txData.ecg,'visible','on');
        case 'bp'
            options.session.nav.info = 1;
            set(userOpt,'userData',options);
            set(tbECG,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.ecg,'visible','off');
            set(tbRSP,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.rsp,'visible','off');
            set(tbSys,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.sys,'visible','off');
            set(txData.bp,'visible','on');
        case 'rsp'
            options.session.nav.info = 2;
            set(userOpt,'userData',options);
            set(tbECG,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.ecg,'visible','off');
            set(tbBP,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.bp,'visible','off');
            set(tbSys,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.sys,'visible','off');
            set(txData.rsp,'visible','on');
        case 'sys'
            options.session.nav.info = 3;
            set(userOpt,'userData',options);
            set(tbECG,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.ecg,'visible','off');
            set(tbBP,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.bp,'visible','off');
            set(tbRSP,'value',0,'backgroundcolor',[.94 .94 .94]);
            set(txData.rsp,'visible','off');
            set(txData.sys,'visible','on');
    end
else
    set(scr,'value',1);
end
end

function patientDisplay(pFile,txData)

ecgDisplay(pFile,txData.ecg);
bpDisplay(pFile,txData.bp);
rspDisplay(pFile,txData.rsp);
sysDisplay(pFile,txData.sys);

end

function ecgDisplay(pFile,txData)
%  display info on available ECG derived data

patient = get(pFile,'userData');

if ~isempty(patient.sig.ecg.raw.data)
    rawStr = ['\n        Raw ECG data (',num2str(...
        patient.sig.ecg.raw.fs),' Hz - ',num2str(length(...
        patient.sig.ecg.raw.data)),' samples)\n\n'];
else
    rawStr = ['\n        Raw ECG data \n                No data ',...
        'available\n\n'];
end
if ~isempty(patient.sig.ecg.filt.data)
    notchStr = []; lowStr = []; highStr = [];
    if isfield(patient.sig.ecg.filt.specs,'notch')
        notchStr = ['                60 Hz Notch filter with ',num2str(...
            patient.sig.ecg.filt.specs.notch),'%% tolerance\n']; 
    end
    if isfield(patient.sig.ecg.filt.specs,'lowPass')
        lowStr = ['                ',num2str(...
            patient.sig.ecg.filt.specs.lowPass),' Hz Low-pass filter\n'];
    end
    if isfield(patient.sig.ecg.filt.specs,'highPass')
        highStr = ['                ',num2str(...
            patient.sig.ecg.filt.specs.highPass),' Hz High-pass filter\n'];
    end
    filtStr = ['        Filtered ECG data (',num2str(...
        patient.sig.ecg.filt.fs),' Hz - ',num2str(length(...
        patient.sig.ecg.filt.data)),' samples)\n',notchStr,lowStr,...
        highStr,'\n'];
else
    filtStr = ['        Filtered ECG data\n                No data ',...
        'available\n\n'];
end
if ~isempty(patient.sig.ecg.rri.data)
    ectStr = []; 
    if ~isempty(patient.sig.ecg.rri.ectopic)
        ectStr = [' - ',num2str(length(patient.sig.ecg.rri.ectopic)),...
            ' ectopic markings'];
    end
    if strcmp(patient.sig.ecg.rri.specs.type,'raw')
        origStr = '                Extracted from: Raw ECG data\n';
    else
        origStr = '                Extracted from: Filtered ECG data\n';
    end
    algStr = ['                Extraction method: ',...
        patient.sig.ecg.rri.specs.algorithm,'\n'];
    varStr = ['        R-R Intervals (',num2str(length(...
        patient.sig.ecg.rri.data)),' RRIs',ectStr,')\n',origStr,...
        algStr,'\n'];
else
    varStr = ['        R-R Intervals\n                No data ',...
        'available\n\n'];
end
if ~isempty(patient.sig.ecg.rri.aligned.data)
    ectStr = [];
    resampStr = ['                Resampling method: ',...
        patient.sig.ecg.rri.aligned.specs.method,'\n'];
    if ~isempty(patient.sig.ecg.rri.ectopic)
        ectStr = ['                Handling of ectopics: ',...
            patient.sig.ecg.rri.aligned.specs.ectopic,'\n'];
    end
    limStr = ['                Aligning limits: ',num2str(...
        patient.sig.ecg.rri.aligned.specs.border.start.value),' s (',...
        patient.sig.ecg.rri.aligned.specs.border.start.ref,') to ',...
        num2str( patient.sig.ecg.rri.aligned.specs.border.end.value),...
        ' s (',patient.sig.ecg.rri.aligned.specs.border.end.ref,')\n'];
    bordStr = ['                Border extension: ',...
        patient.sig.ecg.rri.aligned.specs.border.method,'\n'];
    alignStr = ['        Aligned & Resampled ',upper(...
        patient.sig.ecg.rri.aligned.specs.type),' data (',num2str(...
        patient.sig.ecg.rri.aligned.fs),' Hz - ',num2str(length(...
        patient.sig.ecg.rri.aligned.data)),' samples)\n',resampStr,...
        ectStr,limStr,bordStr,'\n'];
else
    alignStr = ['        Aligned & Resampled data\n                No ',...
        'data available\n\n'];
end
if ~isempty(patient.sig.ecg.rri.aligned.psd.freq)
    fftStr = []; arStr = []; welchStr = [];
    if ~isempty(patient.sig.ecg.rri.aligned.psd.psdFFT)
        fftStr = ['                Fourier Transform: ',num2str(...
            patient.sig.ecg.rri.aligned.psd.specs.N),' points, ',...
            patient.sig.ecg.rri.aligned.psd.specs.window,' window\n'];
    end
    if ~isempty(patient.sig.ecg.rri.aligned.psd.psdAR)
        arStr = ['                AR Model: ',num2str(...
            patient.sig.ecg.rri.aligned.psd.specs.N),' points, model ',...
            'order ',num2str(...
            patient.sig.ecg.rri.aligned.psd.specs.arOrder),'\n'];
    end
    if ~isempty(patient.sig.ecg.rri.aligned.psd.psdWelch)
        welchStr = ['                Welch Method: ',num2str(...
            patient.sig.ecg.rri.aligned.psd.specs.N),' points, ',...
            patient.sig.ecg.rri.aligned.psd.specs.window,' window,\n',...
            '                segments of ',num2str(...
            patient.sig.ecg.rri.aligned.psd.specs.welchSegments),...
            ' samples, overlap of ',num2str(...
            patient.sig.ecg.rri.aligned.psd.specs.welchOverlap),...
            ' samples\n'];
    end
    psdString = ['        ',upper(...
        patient.sig.ecg.rri.aligned.specs.type),' Power Spectral ',...
        'Density (PSD)\n',fftStr,arStr, welchStr,'\n'];
else
    psdString = ['        Power Spectral Density (PSD)\n              ',...
        '  No data ','available\n\n'];
end
stringECG = sprintf([rawStr,filtStr,varStr,alignStr,psdString]);
set(txData,'string',stringECG);

end

function bpDisplay(pFile,txData)
%  display info on available BP derived data

patient = get(pFile,'userData');

if ~isempty(patient.sig.bp.raw.data)
    rawStr = ['\n        Raw BP data (',num2str(...
        patient.sig.bp.raw.fs),' Hz - ',num2str(length(...
        patient.sig.bp.raw.data)),' samples)\n\n'];
else
    rawStr = ['\n        Raw BP data \n                No data ',...
        'available\n\n'];
end
if ~isempty(patient.sig.bp.filt.data)
    notchStr = []; lowStr = [];
    if isfield(patient.sig.bp.filt.specs,'notch')
        notchStr = ['                60 Hz Notch filter with ',...
            num2str(patient.sig.bp.filt.specs.notch),'%% tolerance\n']; 
    end
    if isfield(patient.sig.bp.filt.specs,'lowPass')
        lowStr = ['                ',num2str(...
            patient.sig.bp.filt.specs.lowPass),' Hz Low-pass filter\n'];
    end
    filtStr = ['        Filtered BP data (',num2str(...
        patient.sig.bp.filt.fs),' Hz - ',num2str(length(...
        patient.sig.bp.filt.data)),' samples)\n',notchStr,...
        lowStr,'\n'];
else
    filtStr = ['        Filtered BP data\n                No data ',...
        'available\n\n'];
end
if ~isempty(patient.sig.bp.sbp.data)
    ectStr = []; 
    if ~isempty(patient.sig.bp.sbp.ectopic)
        ectStr = [' - ',num2str(length(patient.sig.bp.sbp.ectopic)),...
            ' ectopic markings'];
    end
    if strcmp(patient.sig.bp.sbp.specs.type,'raw')
        origStr = '                Extracted from: Raw BP data\n';
    else
        origStr = '                Extracted from: Filtered BP data\n';
    end
    algStr = ['                Extraction method: ',...
        patient.sig.bp.sbp.specs.algorithm,'\n'];
    sbpStr = ['        Systolic Blood Pressure (',num2str(length(...
        patient.sig.bp.sbp.data)),' SBPs',ectStr,')\n',origStr,...
        algStr,'\n'];
else
    sbpStr = ['        Systolic Blood Pressure\n                No ',...
        'data available\n\n'];
end
if ~isempty(patient.sig.bp.sbp.aligned.data)
    ectStr = [];
    resampStr = ['                Resampling method: ',...
        patient.sig.bp.sbp.aligned.specs.method,'\n'];
    if ~isempty(patient.sig.bp.sbp.ectopic)
        ectStr = ['                Handling of ectopics: ',...
            patient.sig.bp.sbp.aligned.specs.ectopic,'\n'];
    end
    limStr = ['                Aligning limits: ',num2str(...
        patient.sig.bp.sbp.aligned.specs.border.start.value),' s (',...
        patient.sig.bp.sbp.aligned.specs.border.start.ref,') to ',...
        num2str( patient.sig.bp.sbp.aligned.specs.border.end.value),...
        ' s (',patient.sig.bp.sbp.aligned.specs.border.end.ref,')\n'];
    bordStr = ['                Border extension: ',...
        patient.sig.bp.sbp.aligned.specs.border.method,'\n'];
    alSbpStr = ['        Aligned & Resampled SBP data (',num2str(...
        patient.sig.bp.sbp.aligned.fs),' Hz - ',num2str(length(...
        patient.sig.bp.sbp.aligned.data)),' samples)\n',resampStr,...
        ectStr,limStr,bordStr,'\n'];
else
    alSbpStr = ['        Aligned & Resampled SBP data\n               ',...
        ' No data available\n\n'];
end
if ~isempty(patient.sig.bp.sbp.aligned.psd.freq)
    fftStr = []; arStr = []; welchStr = [];
    if ~isempty(patient.sig.bp.sbp.aligned.psd.psdFFT)
        fftStr = ['                Fourier Transform: ',num2str(...
            patient.sig.bp.sbp.aligned.psd.specs.N),' points, ',...
            patient.sig.bp.sbp.aligned.psd.specs.window,' window\n'];
    end
    if ~isempty(patient.sig.bp.sbp.aligned.psd.psdAR)
        arStr = ['                AR Model: ',num2str(...
            patient.sig.bp.sbp.aligned.psd.specs.N),' points, ',...
            'model order ',num2str(...
            patient.sig.bp.sbp.aligned.psd.specs.arOrder),'\n'];
    end
    if ~isempty(patient.sig.bp.sbp.aligned.psd.psdWelch)
        welchStr = ['                Welch Method: ',num2str(...
            patient.sig.bp.sbp.aligned.psd.specs.N),' points, ',...
            patient.sig.bp.sbp.aligned.psd.specs.window,' window,\n',...
            '                        segments of ',num2str(...
            patient.sig.bp.sbp.aligned.psd.specs.welchSegments),...
            ' samples, overlap of ',num2str(...
            patient.sig.bp.sbp.aligned.psd.specs.welchOverlap),...
            ' samples\n'];
    end
    psdSbpStr = ['        SBP Power Spectral Density (PSD)\n',fftStr,...
        arStr,welchStr,'\n'];
else
    psdSbpStr = ['        SBP Power Spectral Density (PSD)\n          ',...
        '      No data available\n\n'];
end
if ~isempty(patient.sig.bp.dbp.data)
    ectStr = []; 
    if ~isempty(patient.sig.bp.dbp.ectopic)
        ectStr = [' - ',num2str(length(patient.sig.bp.dbp.ectopic)),...
            ' ectopic markings'];
    end
    if strcmp(patient.sig.bp.dbp.specs.type,'raw')
        origStr = '                Extracted from Raw BP data\n';
    else
        origStr = '                Extracted from Filtered BP data\n';
    end
    algStr = ['                Extraction method: ',...
        patient.sig.bp.dbp.specs.algorithm,'\n'];
    dbpStr = ['        Diastolic Blood Pressure (',num2str(length(...
        patient.sig.bp.dbp.data)),' DBPs',ectStr,')\n',origStr,...
        algStr,'\n'];
else
    dbpStr = ['        Diastolic Blood Pressure\n                No ',...
        'data available\n\n'];
end
if ~isempty(patient.sig.bp.dbp.aligned.data)
    ectStr = [];
    resampStr = ['                Resampling method: ',...
        patient.sig.bp.dbp.aligned.specs.method,'\n'];
    if ~isempty(patient.sig.bp.dbp.ectopic)
        ectStr = ['                Handling of ectopics: ',...
            patient.sig.bp.dbp.aligned.specs.ectopic,'\n'];
    end
    limStr = ['                Aligning limits: ',num2str(...
        patient.sig.bp.dbp.aligned.specs.border.start.value),' s (',...
        patient.sig.bp.dbp.aligned.specs.border.start.ref,') to ',...
        num2str( patient.sig.bp.dbp.aligned.specs.border.end.value),...
        ' s (',patient.sig.bp.dbp.aligned.specs.border.end.ref,')\n'];
    bordStr = ['                Border extension: ',...
        patient.sig.bp.dbp.aligned.specs.border.method,'\n'];
    alDbpStr = ['        Aligned & Resampled DBP data (',num2str(...
        patient.sig.bp.dbp.aligned.fs),' Hz - ',num2str(length(...
        patient.sig.bp.dbp.aligned.data)),' samples)\n',resampStr,...
        ectStr,limStr,bordStr,'\n'];
else
    alDbpStr = ['        Aligned & Resampled DBP data\n               ',...
        ' No data available\n\n'];
end
if ~isempty(patient.sig.bp.dbp.aligned.psd.freq)
    fftStr = []; arStr = []; welchStr = [];
    if ~isempty(patient.sig.bp.dbp.aligned.psd.psdFFT)
        fftStr = ['                Fourier Transform: ',num2str(...
            patient.sig.bp.dbp.aligned.psd.specs.N),' points, ',...
            patient.sig.bp.dbp.aligned.psd.specs.window,' window\n'];
    end
    if ~isempty(patient.sig.bp.dbp.aligned.psd.psdAR)
        arStr = ['                AR Model: ',num2str(...
            patient.sig.bp.dbp.aligned.psd.specs.N),' points, ',...
            'model order ',num2str(...
            patient.sig.bp.dbp.aligned.psd.specs.arOrder),'\n'];
    end
    if ~isempty(patient.sig.bp.dbp.aligned.psd.psdWelch)
        welchStr = ['                Welch Method: ',num2str(...
            patient.sig.bp.dbp.aligned.psd.specs.N),' points, ',...
            patient.sig.bp.dbp.aligned.psd.specs.window,' window,\n',...
            '                segments of ',num2str(...
            patient.sig.bp.dbp.aligned.psd.specs.welchSegments),...
            ' samples, overlap of ',num2str(...
            patient.sig.bp.dbp.aligned.psd.specs.welchOverlap),...
            ' samples\n'];
    end
    psdDbpStr = ['        DBP Power Spectral Density (PSD)\n',...
        fftStr,arStr,welchStr,'\n'];
else
    psdDbpStr = ['        DBP Power Spectral Density (PSD)\n       ',...
        '         No data available\n\n'];
end
stringBP = sprintf([rawStr,filtStr,sbpStr,alSbpStr,psdSbpStr,dbpStr,...
    alDbpStr,psdDbpStr]);
set(txData,'string',stringBP);

end

function rspDisplay(pFile,txData)
% display info on available Aiflow / lung volume derived data

patient = get(pFile,'userData');

if ~isempty(patient.sig.rsp.raw.data)
    rawStr = ['\n        Raw airflow data (',num2str(...
        patient.sig.rsp.raw.fs),' Hz - ',num2str(length(...
        patient.sig.rsp.raw.data)),' samples)\n\n'];
else
    rawStr = ['\n        Raw airflow data \n                No data ',...
        'available\n\n'];
end
if ~isempty(patient.sig.rsp.int.data)
    intStr = ['        Integrated airflow data (',num2str(...
        patient.sig.rsp.int.fs),' Hz - ',num2str(length(...
        patient.sig.rsp.int.data)),' samples)\n\n'];
else
    intStr = ['        Integrated airflow data\n                No',...
        ' data available\n\n'];
end
if ~isempty(patient.sig.rsp.ilv.data)
    if length(fieldnames(patient.sig.rsp.ilv.specs.method)) > 1
        if isfield(patient.sig.rsp.ilv.specs.method,'fc')
            algStr = ['                Detrending: ',num2str(...
                patient.sig.rsp.ilv.specs.method.fc),' Hz ',...
                patient.sig.rsp.ilv.specs.method.id,'\n'];
        elseif isfield(patient.sig.rsp.ilv.specs.method,'order')
            algStr = ['                Detrending: ',...
                patient.sig.rsp.ilv.specs.method.id,' of order ',...
                num2str(patient.sig.rsp.ilv.specs.method.order),'\n'];
        end
    else
        algStr = ['                Detrending: ',...
            patient.sig.rsp.ilv.specs.method.id,'\n'];
    end
    ilvStr = ['        Instantaneous Lung Volume (',num2str(length(...
        patient.sig.rsp.ilv.data)),' samples)\n', algStr,'\n'];
else
    ilvStr = ['        Instantaneous Lung Volume\n                No ',...
        'data available\n\n'];
end
if ~isempty(patient.sig.rsp.ilv.aligned.data)
    resampStr = ['                Resampling method: ',...
        patient.sig.rsp.ilv.aligned.specs.method,'\n'];
    limStr = ['                Aligning limits: ',num2str(...
        patient.sig.rsp.ilv.aligned.specs.border.start.value),' s (',...
        patient.sig.rsp.ilv.aligned.specs.border.start.ref,') to ',...
        num2str( patient.sig.rsp.ilv.aligned.specs.border.end.value),...
        ' s (',patient.sig.rsp.ilv.aligned.specs.border.end.ref,')\n'];
    bordStr = ['                Border extension: ',...
        patient.sig.rsp.ilv.aligned.specs.border.method,'\n'];
    alIlvStr = ['        Aligned & Resampled ILV data (',num2str(...
        patient.sig.rsp.ilv.aligned.fs),' Hz - ',num2str(length(...
        patient.sig.rsp.ilv.aligned.data)),' samples)\n',resampStr,...
        limStr,bordStr,'\n'];
else
    alIlvStr = ['        Aligned & Resampled ILV data\n               ',...
        ' No data available\n\n'];
end
if ~isempty(patient.sig.rsp.ilv.aligned.psd.freq)
    fftStr = []; arStr = []; welchStr = [];
    if ~isempty(patient.sig.rsp.ilv.aligned.psd.psdFFT)
        fftStr = ['                Fourier Transform: ',num2str(...
            patient.sig.rsp.ilv.aligned.psd.specs.N),' points, ',...
            patient.sig.rsp.ilv.aligned.psd.specs.window,' window\n'];
    end
    if ~isempty(patient.sig.rsp.ilv.aligned.psd.psdAR)
        arStr = ['                AR Model: ',num2str(...
            patient.sig.rsp.ilv.aligned.psd.specs.N),' points, ',...
            'model order ',num2str(...
            patient.sig.rsp.ilv.aligned.psd.specs.arOrder),'\n'];
    end
    if ~isempty(patient.sig.rsp.ilv.aligned.psd.psdWelch)
        welchStr = ['                Welch Method: ',num2str(...
            patient.sig.rsp.ilv.aligned.psd.specs.N),' points, ',...
            patient.sig.rsp.ilv.aligned.psd.specs.window,' window,\n',...
            '                        segments of ',num2str(...
            patient.sig.rsp.ilv.aligned.psd.specs.welchSegments),...
            ' samples, overlap of ',num2str(...
            patient.sig.rsp.ilv.aligned.psd.specs.welchOverlap),...
            ' samples\n'];
    end
    psdIlvStr = ['        ILV Power Spectral Density (PSD)\n',fftStr,...
        arStr,welchStr,'\n'];
else
    psdIlvStr = ['        ILV Power Spectral Density (PSD)\n          ',...
        '      No data available\n\n'];
end
if ~isempty(patient.sig.rsp.filt.data)
    filtStr = ['        Filtered Instantaneous Lung Volume (',num2str(...
        length(patient.sig.rsp.filt.data)),' samples)\n               ',...
        ' ',num2str(patient.sig.rsp.filt.specs.filterFc),' Hz Low-pass',...
        ' filter\n\n'];
else
    filtStr = ['        Filtered Instantaneous Lung Volume\n          ',...
        '      No data available\n\n'];
end
if ~isempty(patient.sig.rsp.filt.aligned.data)
    resampStr = ['                Resampling method: ',...
        patient.sig.rsp.filt.aligned.specs.method,'\n'];
    limStr = ['                Aligning limits: ',num2str(...
        patient.sig.rsp.filt.aligned.specs.border.start.value),' s (',...
        patient.sig.rsp.filt.aligned.specs.border.start.ref,') to ',...
        num2str( patient.sig.rsp.filt.aligned.specs.border.end.value),...
        ' s (',patient.sig.rsp.filt.aligned.specs.border.end.ref,')\n'];
    bordStr = ['                Border extension: ',...
        patient.sig.rsp.filt.aligned.specs.border.method,'\n'];
    alFiltStr = ['        Aligned & Resampled Filtered ILV data (',...
        num2str(patient.sig.rsp.filt.aligned.fs),' Hz - ',num2str(...
        length(patient.sig.rsp.filt.aligned.data)),' samples)\n',...
        resampStr,limStr,bordStr,'\n'];
else
    alFiltStr = ['        Aligned & Resampled Filtered ILV data\n     ',...
        '           No data available\n\n'];
end
if ~isempty(patient.sig.rsp.filt.aligned.psd.freq)
    fftStr = []; arStr = []; welchStr = [];
    if ~isempty(patient.sig.rsp.filt.aligned.psd.psdFFT)
        fftStr = ['                Fourier Transform: ',num2str(...
            patient.sig.rsp.filt.aligned.psd.specs.N),' points, ',...
            patient.sig.rsp.filt.aligned.psd.specs.window,' window\n'];
    end
    if ~isempty(patient.sig.rsp.filt.aligned.psd.psdAR)
        arStr = ['                AR Model: ',num2str(...
            patient.sig.rsp.filt.aligned.psd.specs.N),' points, ',...
            'model order ',num2str(...
            patient.sig.rsp.filt.aligned.psd.specs.arOrder),'\n'];
    end
    if ~isempty(patient.sig.rsp.filt.aligned.psd.psdWelch)
        welchStr = ['                Welch Method: ',num2str(...
            patient.sig.rsp.filt.aligned.psd.specs.N),' points, ',...
            patient.sig.rsp.filt.aligned.psd.specs.window,' window,\n',...
            '                segments of ',num2str(...
            patient.sig.rsp.filt.aligned.psd.specs.welchSegments),...
            ' samples, overlap of ',num2str(...
            patient.sig.rsp.filt.aligned.psd.specs.welchOverlap),...
            ' samples\n'];
    end
    psdFiltStr = ['        Filtered ILV Power Spectral Density (PSD)\n',...
        fftStr,arStr,welchStr,'\n'];
else
    psdFiltStr = ['        Filtered ILV Power Spectral Density (PSD)\n',...
        '                No data available\n\n'];
end
stringRSP = sprintf([rawStr,intStr,ilvStr,alIlvStr,psdIlvStr,filtStr,...
    alFiltStr,psdFiltStr]);

set(txData,'string',stringRSP);

end

function sysDisplay(pFile,txData)
%  display info on available systems and models data

patient = get(pFile,'userData');

% find all systems and total number of models
allSys = fieldnames(patient.sys);
if isempty(allSys)
    sysString = sprintf('\n        No systems or models available');
else
    noModels = 0;
    for i = 1:length(allSys)
        curMod = fieldnames(patient.sys.(allSys{i}).models);
        noModels = noModels + length(curMod);
    end

    % build string for each system and its respective models
    sysStr = cell(1,length(allSys));
    for i = 1:length(allSys)
        inStr = [];
        if length(patient.sys.(allSys{i}).data.InputName) == 2
            inStr = ['                Input 1: ',patient.sys.(allSys{...
                i}).data.InputName{1},' (',patient.sys.(allSys{...
                i}).data.InputUnit{1},')\n                Input 2: ',...
                patient.sys.(allSys{i}).data.InputName{2},' (',...
                patient.sys.(allSys{i}).data.InputUnit{2},')\n'];
        elseif length(patient.sys.(allSys{i}).data.InputName) == 1
            inStr = ['                Input: ',patient.sys.(allSys{...
                i}).data.InputName{:},' (',patient.sys.(allSys{...
                i}).data.InputUnit{:},')\n'];
        end
        if length(patient.sys.(allSys{i}).data.ExperimentName) == 2
            estStr = ['                ',num2str(100*length(...
                patient.sys.(allSys{i}).data.OutputData{1})/...
                (length(patient.sys.(allSys{i}).data.OutputData{1})+...
                length(patient.sys.(allSys{i}).data.OutputData{2}))),...
                '%% of data for system estimation\n'];
        else
            estStr = ['                100%% of data for system ',...
                'estimation\n'];
        end
        sysAux =['\n        ',patient.sys.(allSys{i}).data.Name,'\n ',...
            '               Output data: ',patient.sys.(allSys{...
            i}).data.OutputName{:},' (',patient.sys.(allSys{...
            i}).data.OutputUnit{:},')\n',inStr,estStr,'\n'];

        curMod = fieldnames(patient.sys.(allSys{i}).models);
        if isempty(curMod)
            modStr = {'                No models available\n\n'};
        else
            modStr = cell(1,length(curMod));
            for j = 1:length(curMod)
                if length(patient.sys.(allSys{i}).models.(...
                        curMod{j}).fit) == 2
                    fitStr = ['                                Fit: ',...
                        num2str(patient.sys.(allSys{i}).models.(curMod{...
                        j}).fit(1)),'%% (estimation data), ',num2str(...
                        patient.sys.(allSys{i}).models.(curMod{...
                        j}).fit(2)),'%% (validation data)\n'];
                else
                    fitStr = ['                                Fit: ',...
                        num2str(patient.sys.(allSys{i}).models.(curMod{...
                        j}).fit),'%% (estimation data)\n'];
                end
                if ~isempty(patient.sys.(allSys{i}).models.(curMod{...
                        j}).imResp.time)
                    imStr = ['                                Impulse ',...
                        'Response(s) generated\n'];
                else
                    imStr = ['                                Impulse ',...
                        'Response(s) not generated\n'];
                end
                if strcmp(patient.sys.(allSys{i}).models.(curMod{...
                        j}).Type,'LBF')
                    param = ['                                ',...
                        'Parametrization: [',num2str(patient.sys.(...
                        allSys{i}).models.(curMod{j}).Order),']\n     ',...
                        '                           Delay: [',num2str(...
                        patient.sys.(allSys{i}).models.(curMod{...
                        j}).Delay),']\n                               ',...
                        ' Pole: ',num2str(patient.sys.(allSys{...
                        i}).models.(curMod{j}).Pole),'\n              ',...
                        '                  System memory length: ',...
                        num2str(patient.sys.(allSys{i}).models.(curMod{...
                        j}).SysMem),'\n',fitStr,imStr,'\n'];
                elseif strcmp(patient.sys.(allSys{i}).models.(curMod{...
                        j}).Type,'MBF')
                    param = ['                                ',...
                        'Parametrization: [',num2str(patient.sys.(...
                        allSys{i}).models.(curMod{j}).Order),']\n     ',...
                        '                           Delay: [',...
                        num2str(patient.sys.(allSys{i}).models.(curMod{...
                        j}).Delay),']\n                               ',...
                        ' Pole: ',num2str(patient.sys.(allSys{...
                        i}).models.(curMod{j}).Pole),'\n              ',...
                        '                  System memory length: ',...
                        num2str(patient.sys.(allSys{i}).models.(curMod{...
                        j}).SysMem),'\n                               ',...
                        ' Generalization order: [',num2str(patient.sys.(...
                        allSys{i}).models.(curMod{j}).GenOrd),']\n',...
                        fitStr,imStr,'\n'];
                elseif strcmp(patient.sys.(allSys{i}).models.(curMod{...
                        j}).Type,'ARX')
                    param = ['                                ',...
                        'Parametrization: [',num2str(patient.sys.(...
                        allSys{i}).models.(curMod{j}).Order),']\n     ',...
                        '                           Delay: [',num2str(...
                        patient.sys.(allSys{i}).models.(curMod{...
                        j}).Delay),']\n',fitStr,imStr,'\n'];
                else
                    param = ['                                ',...
                        'Parametrization: [',num2str(patient.sys.(...
                        allSys{i}).models.(curMod{j}).Order),']\n',...
                        fitStr,'\n'];
                end

                modStr{j} = ['                       ',patient.sys.(...
                    allSys{i}).models.(curMod{j}).Name,': ',...
                    patient.sys.(allSys{i}).models.(curMod{j}).Type,...
                    ' model\n',param];
            end
        end
        
        % build system string with all models for this system
        sysStr{i} = sysAux;
        for j = 1:length(modStr)
            sysStr{i} = strcat(sysStr{i},modStr{j});
        end
    end

    % build final string
    sysString = [];
    for i = 1:length(sysStr)
        sysString = strcat(sysString,sysStr{i});
    end
end
set(txData,'string',sprintf(sysString));
end